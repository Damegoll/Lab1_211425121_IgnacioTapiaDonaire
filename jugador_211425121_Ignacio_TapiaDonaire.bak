#lang racket
(require "propiedad_211425121_Ignacio_TapiaDonaire.rkt")
(require "juego_211425121_Ignacio_TapiaDonaire.rkt")
(provide jugador)
(provide get-jugador-id)
(provide get-jugador-nombre)
(provide get-jugador-dinero)
(provide get-jugador-propiedades)
(provide get-jugador-pos)
(provide get-jugador-carcel)
(provide get-cartas-salir-carcel)

; -----------------------------------------------------------------

; Descripción: Constructor de los jugadores en CAPITALIA
; DOM: id (int) nombre (string) personaje (string) dinero (int) propiedades (list) posicion (int) estaEnCarcel (boolean) totalCartasSalirCarcecl (int)
; REC: jugador (lista)
; Tipo recursion: no aplica

(define (jugador id nombre dinero propiedades posicion estaEnCarcel totalCartasSalirCarcel)
  (list id nombre dinero propiedades posicion estaEnCarcel totalCartasSalirCarcel))

; -----------------------------------------------------------------

; Descripcion: selector del "player" para obtener directamente su id
; DOM: jugador (lista)
; REC: id (string)
; Tipo recursion: no aplica

(define (get-jugador-id jugador)
  (car jugador))

; -----------------------------------------------------------------

; Descripción: selector de "player" para obtener nombre del jugador
; DOM: jugadorNombre (lista)
; REC: nombre (string)
; Tipo recursion: no aplica

(define (get-jugador-nombre jugadorNombre)
  (cadr jugadorNombre))

; -----------------------------------------------------------------

; Descripción: selector de "player" para obtener el dinero del jugador
; DOM: jugadorPlata (player)
; REC: player (lista)
; Tipo recursion: no aplica

(define (get-jugador-dinero jugadorPlata)
  (caddr jugadorPlata))

; -----------------------------------------------------------------

; Descripción: Selector para obtener la lista de propiedades del jugador
; DOM: jugadorPropPropias (jugador)
; REC: propiedades (lista)
; Tipo recursion: no aplica

(define (get-jugador-propiedades jugadorPropPropias)
  (cadddr jugadorPropPropias))

; -----------------------------------------------------------------

; Descripción: Selector para obtener la posicion del jugador
; DOM: jugadorPos (player)
; REC: posicion (int)
; Tipo recursion: no aplica

(define (get-jugador-pos jugadorPos)
  (car (cddddr jugadorPos)))

; -----------------------------------------------------------------

; Descripción: Selector para ver si el jugador esta en carcel
; DOM: jugadorCarcel (player)
; REC: estaEnCarcel (boolean)
; Tipo recursion: no aplica

(define (get-jugador-carcel jugadorCarcel)
  (cadr (cddddr jugadorCarcel)))

; -----------------------------------------------------------------

; Descripción: Selector para sacar la cantidad total de cartas para salir de la carcel
; DOM: cartasSalirCarcel (jugador)
; REC: totalCartasSalirCarcel (int)
; Tipo recursion: no aplica

(define (get-cartas-salir-carcel cartasSalirCarcel)
  (caddr (cddddr cartasSalirCarcel)))

; -----------------------------------------------------------------

; Descripción: Modificador para actualizar la posicion del jugador
; DOM: jugadorXD(player) nueva-pos(lista)
; REC: posicion (int)
; Tipo recursion: no aplica

(define (player-update-move jugadorXD nueva-pos)
  (list
   (list-ref jugadorXD 1)
   (list-ref jugadorXD 2)
   (list-ref jugadorXD 3)
   (list-ref jugadorXD 4)
   nueva-pos
   (list-ref jugadorXD 6)
   (list-ref jugadorXD 7)))

; -----------------------------------------------------------------

; Descripción: 
; DOM: jugador-mover(player) valor-dados(lista) 'pendiente'
; REC: posicion (int)
; Tipo recursion: no aplica

(define (player-move jugador-mover valor-dados)
  (cond
    ((eq? (get-jugador-carcel jugador-mover) #t) (display "Usted no puede moverse, se encuentra en la carcel")
                                            jugador-mover)
    (else
     (player-update-move jugador-mover
                         (+ (get-jugador-pos jugador-mover)
                            (+ (car valor-dados)
                               (cdr valor-dados)))))))

; -----------------------------------------------------------------

; Descripcion: Modificador que agrega la propiedad al jugador respectivo
; DOM:
; REC:
; Tipo recursion:

#|(define (player-add-property jugadorCasitalinda laCasitalinda)
  ())
|#

; Descripción: (NO APLICADO) Modificador que permite comprar propiedades en CAPITALIA
; DOM: jugadorCompra (jugador) casaCompra (propiedad)
; REC: propiedades (lista)
; Tipo recursion: no aplica

(define (player-comprar-casita jugadorCompra casaCompra)
  (if (eq? (get-propiedad-dueño casaCompra) #f)
      (if (< (get-jugador-dinero jugadorCompra) (get-propiedad-precio casaCompra)) 
          (display "no hay plata, erai") 
          (- (get-jugador-dinero jugadorCompra) (get-propiedad-precio casaCompra))) 
      null))

; -----------------------------------------------------------------